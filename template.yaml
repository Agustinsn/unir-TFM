AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Infraestructura base para app de usuarios (VPC + NAT + Cognito + Roles IAM)

Parameters:
  BranchName:
    Type: String
    Default: main
  Stage:
    Type: String
    Default: dev
    Description: Environment stage (dev, staging, prod)

Globals:
  Function:
    Timeout: 10
    Runtime: python3.11
    Architectures:
      - x86_64

Resources:
  # VPC & Networking

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: SAM-VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SAM-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SAM-PublicSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: SAM-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: SAM-Public-RT

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Elastic IP para NAT
  NATElasticIP:
    Type: AWS::EC2::EIP
    DeletionPolicy: Retain
    Properties:
      Domain: vpc

  # NAT Gateway
  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: SAM-NAT-GW

  # Private Subnets (para Lambdas)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.101.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: SAM-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.102.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: SAM-PrivateSubnet2

  # Private Route Table
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: SAM-Private-RT

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group para Lambdas dentro de la VPC
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG para funciones Lambda
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: SAM-Lambda-SG

  ## ========== Cognito ==========

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SAMUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: user-app-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  ## ========== Lambdas ==========

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/register/
      Handler: app.register
      Runtime: nodejs18.x
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:SignUp
                - cognito-idp:AdminConfirmSignUp
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        ApiRegister:
          Type: Api
          Properties:
            Path: /register
            Method: post

  LoginUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/login/
      Handler: app.login
      Runtime: nodejs18.x
      Environment:
        Variables:
          CLIENT_ID: !Ref UserPoolClient
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:InitiateAuth
              Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: arn:aws:logs:*:*:*
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
              Resource: "*"
      Events:
        ApiRegister:
          Type: Api
          Properties:
            Path: /login
            Method: post

  # IAM Roles

  RegisterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RegisterLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: RegisterUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cognito-idp:SignUp
                  - cognito-idp:AdminConfirmSignUp
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  LoginLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LoginUserLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoLoginPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                Resource: "*"

  # S3 Buckets

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "user-app-artifacts-${AWS::AccountId}-${AWS::StackName}-${Stage}"

  # SAMBucket:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: !Sub "sam-deployments-${AWS::AccountId}-${Stage}-${AWS::StackName}"
  #     VersioningConfiguration:
  #       Status: Enabled
  #     PublicAccessBlockConfiguration:
  #       BlockPublicAcls: true
  #       BlockPublicPolicy: true
  #       IgnorePublicAcls: true
  #       RestrictPublicBuckets: true

  # CI/CD Roles & Projects

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:*
                  - lambda:*
                  - logs:*
                  - s3:*
                  - iam:GetRole
                  - iam:PassRole
                  - cloudwatch:PutMetricData
                  - cognito-idp:AdminInitiateAuth
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:GetRole
                Resource: !GetAtt RegisterLambdaRole.Arn
        - PolicyName: AccessSecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:userapp/env-variables*

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:*
                  - s3:*
                  - iam:PassRole
                  - secretsmanager:GetSecretValue
                  - cloudformation:*
                  - sts:AssumeRole
                  - lambda:*
                  - logs:*
                  - cloudwatch:PutMetricData
                  - cognito-idp:*
                  - ec2:AllocateAddress
                  - ec2:AssociateAddress
                  - ec2:CreateNatGateway
                  - ec2:DescribeAddresses
                  - ec2:DisassociateAddress
                  - ec2:ReleaseAddress
                  - ec2:CreateInternetGateway
                  - ec2:AttachInternetGateway
                  - ec2:DeleteInternetGateway
                  - ec2:DescribeInternetGateways
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt CodeBuildRole.Arn
        - PolicyName: CloudFormationPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${ArtifactBucket}"
                  - !Sub "arn:aws:s3:::${ArtifactBucket}/*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "user-app-build"
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        # Image: public.ecr.aws/sam/build-python3.11:latest
        Image: aws/codebuild/standard:7.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: USER_POOL_ID
            Type: SECRETS_MANAGER
            Value: userapp/env-variables:USER_POOL_ID
          - Name: USER_POOL_CLIENT_ID
            Type: SECRETS_MANAGER
            Value: userapp/env-variables:USER_POOL_CLIENT_ID
          - Name: STAGE
            Value: !Ref Stage
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "user-app-pipeline"
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: Agustinsn
                Repo: unir-TFM
                Branch: master
                OAuthToken: "{{resolve:secretsmanager:github-token:SecretString:token}}"
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: SamDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Sub user-app-stack-${Stage}
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
                TemplatePath: BuildOutput::packaged.yaml
                RoleArn: !GetAtt CodePipelineRole.Arn
              RunOrder: 1

Outputs:
  VpcId:
    Description: ID de la VPC
    Value: !Ref MyVPC
  PublicSubnet1:
    Description: Subnet pública 1
    Value: !Ref PublicSubnet1
  PublicSubnet2:
    Description: Subnet pública 2
    Value: !Ref PublicSubnet2
  PrivateSubnet1:
    Description: Subnet privada 1
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: Subnet privada 2
    Value: !Ref PrivateSubnet2
  SecurityGroupId:
    Description: ID del Security Group para Lambdas
    Value: !Ref LambdaSecurityGroup
  CognitoUserPoolId:
    Description: ID del User Pool
    Value: !Ref UserPool
  CognitoClientId:
    Description: ID del App Client
    Value: !Ref UserPoolClient
  RegisterLambdaRoleArn:
    Description: "ARN of the Register Lambda execution role"
    Value: !GetAtt RegisterLambdaRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RegisterLambdaRoleArn"
  # LoginLambdaRoleArn:
  #   Description: ARN del rol IAM para Lambda de login
  #   Value: !GetAtt LoginLambdaRole.Arn
  # SAMBucketName:
  #   Description: Nombre del bucket S3 para despliegues SAM
  #   Value: !Ref SAMBucket
  ArtifactBucketName:
    Description: Nombre del bucket S3 para artifacts
    Value: !Ref ArtifactBucket
